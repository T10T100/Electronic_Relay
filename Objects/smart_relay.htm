<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\smart_relay.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\smart_relay.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Feb 08 11:20:08 2016
<BR><P>
<H3>Maximum Stack Usage =        316 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Device::Device() &rArr; device_gpio_init() &rArr; gpio_init(GPIO_TypeDef*, unsigned, GPIOSpeed_TypeDef, GPIOMode_TypeDef, GPIOOType_TypeDef, GPIOPuPd_TypeDef) &rArr; GPIO_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[74]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1c]">EXTI0_1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1e]">EXTI4_15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2a]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2b]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[19]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_stm32f0xx_1.o(i.SystemInit) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[26]">TIM14_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[27]">TIM15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[28]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[29]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[25]">TIM3_IRQHandler</a> from stm32f0xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2f]">USART2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[40]">menuAdjHandler(void*, int)</a> from device.o(i._Z14menuAdjHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[41]">menuAdjKHandler(void*, int)</a> from device.o(i._Z15menuAdjKHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[3c]">menuExitHandler(void*, int)</a> from device.o(i._Z15menuExitHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[3a]">menuSetupOnHandler(void*, int)</a> from device.o(i._Z18menuSetupOnHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[32]">menuHeadPageHandler(void*, int)</a> from device.o(i._Z19menuHeadPageHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[43]">menuSaveExitHandler(void*, int)</a> from device.o(i._Z19menuSaveExitHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[3b]">menuSetupOffHandler(void*, int)</a> from device.o(i._Z19menuSetupOffHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[42]">menuAdjOffsetHandler(void*, int)</a> from device.o(i._Z20menuAdjOffsetHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[33]">menuMainPage0Handler(void*, int)</a> from device.o(i._Z20menuMainPage0HandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[34]">menuMainPage1Handler(void*, int)</a> from device.o(i._Z20menuMainPage1HandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[35]">menuMainPage2Handler(void*, int)</a> from device.o(i._Z20menuMainPage2HandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[36]">menuMainPage3Handler(void*, int)</a> from device.o(i._Z20menuMainPage3HandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[37]">menuMainPage4Handler(void*, int)</a> from device.o(i._Z20menuMainPage4HandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[3f]">menuSetupClockHandler(void*, int)</a> from device.o(i._Z21menuSetupClockHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[3d]">menuSetupOvTopHandler(void*, int)</a> from device.o(i._Z21menuSetupOvTopHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[3e]">menuSetupOvBottHandler(void*, int)</a> from device.o(i._Z22menuSetupOvBottHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[39]">menuInvertOutputHandler(void*, int)</a> from device.o(i._Z23menuInvertOutputHandlerPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[38]">menuSwitchDefaultRelayPresets(void*, int)</a> from device.o(i._Z29menuSwitchDefaultRelayPresetsPvi) referenced from main.o(i._ZN6DeviceC1Ev)
 <LI><a href="#[46]">LCD::data_on_bus(unsigned char)</a> from device.o(i._ZN3LCD11data_on_busEh) referenced from device.o(.constdata__ZTV3LCD)
 <LI><a href="#[44]">LCD::command_next()</a> from device.o(i._ZN3LCD12command_nextEv) referenced from device.o(.constdata__ZTV3LCD)
 <LI><a href="#[47]">LCD::strobe()</a> from device.o(i._ZN3LCD6strobeEv) referenced from device.o(.constdata__ZTV3LCD)
 <LI><a href="#[48]">LCD::delay_ms(unsigned)</a> from device.o(i._ZN3LCD8delay_msEj) referenced from device.o(.constdata__ZTV3LCD)
 <LI><a href="#[45]">LCD::data_next()</a> from device.o(i._ZN3LCD9data_nextEv) referenced from device.o(.constdata__ZTV3LCD)
 <LI><a href="#[4a]">Relay::RelayReadAnalog()</a> from device.o(i._ZN5Relay15RelayReadAnalogEv) referenced from device.o(.constdata__ZTV5Relay)
 <LI><a href="#[49]">Relay::RelayWriteControl(bool)</a> from device.o(i._ZN5Relay17RelayWriteControlEb) referenced from device.o(.constdata__ZTV5Relay)
 <LI><a href="#[4b]">Message&lang;(int)9&rang;::__print(void*)</a> from device.o(t._ZN7MessageILi9EE7__printEPv) referenced from device.o(.constdata__ZTV7MessageILi9EE)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[4c]">__sti___9_relay_cpp_87aa0a3f</a> from relay.o(i.__sti___9_relay_cpp_87aa0a3f) referenced from relay.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[51]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[56]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[eb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[52]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[ef]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[5b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[105]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[50]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[106]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[53]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[55]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[107]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[57]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Device::Device() &rArr; device_gpio_init() &rArr; gpio_init(GPIO_TypeDef*, unsigned, GPIOSpeed_TypeDef, GPIOMode_TypeDef, GPIOOType_TypeDef, GPIOPuPd_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[108]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[76]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[109]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_relay_cpp_87aa0a3f
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f030.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[84]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockConverter(char*, const char*, Time&)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempInCelsium(int)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdjustments(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dtostr_cpp]::reverseChars(char*)
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupClockHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::getLocalTime()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::unstashCurrentPreset()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::stashCurrentPreset()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::loadPreset(RelayPresetDataPack&, bool)
</UL>

<P><STRONG><a name="[10b]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
</UL>

<P><STRONG><a name="[62]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[61]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::Message(unsigned char)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::print(void*)
</UL>

<P><STRONG><a name="[10c]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_enable_clock()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utoa(char*, unsigned, int)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement()
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa(char*, int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockConverter(char*, const char*, Time&)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::RelayReadAnalog()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempInCelsium(int)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdjustments(int)
</UL>

<P><STRONG><a name="[111]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>

<P><STRONG><a name="[112]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>

<P><STRONG><a name="[65]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
</UL>

<P><STRONG><a name="[68]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>

<P><STRONG><a name="[114]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>

<P><STRONG><a name="[115]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
</UL>

<P><STRONG><a name="[6b]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[6a]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage2Handler(void*, int)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjOffsetHandler(void*, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getOffValue()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getOnValue()
</UL>

<P><STRONG><a name="[116]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::RelayReadAnalog()
</UL>

<P><STRONG><a name="[117]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[118]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[70]"></a>__fpl_cmpreturn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[71]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[54]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[59]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[72]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[5d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[119]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>ADC_ChannelConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_ChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_adc_init()
</UL>

<P><STRONG><a name="[8f]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_adc_init()
</UL>

<P><STRONG><a name="[77]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_adc_init()
</UL>

<P><STRONG><a name="[8e]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f0xx_adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_adc_init()
</UL>

<P><STRONG><a name="[d1]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::RelayReadAnalog()
</UL>

<P><STRONG><a name="[90]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f0xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_adc_init()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::RelayReadAnalog()
</UL>

<P><STRONG><a name="[8c]"></a>ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_adc_init()
</UL>

<P><STRONG><a name="[91]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_adc_init()
</UL>

<P><STRONG><a name="[8b]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_adc_init()
</UL>

<P><STRONG><a name="[c2]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(GPIO_TypeDef*, unsigned, GPIOSpeed_TypeDef, GPIOMode_TypeDef, GPIOOType_TypeDef, GPIOPuPd_TypeDef)
</UL>

<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
</UL>

<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_enable_clock()
</UL>

<P><STRONG><a name="[9d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
</UL>

<P><STRONG><a name="[b3]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_enable_clock()
</UL>

<P><STRONG><a name="[78]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; TimingDelay_Decrement()
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_stm32f0xx_1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; [local to system_stm32f0xx_c]::SetSysClock()
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to system_stm32f0xx_c]::SetSysClock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>TIM3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TIM3_IRQHandler &rArr; timer3_tick(void*) &rArr; Relay::tick() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_tick(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
</UL>

<P><STRONG><a name="[a4]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
</UL>

<P><STRONG><a name="[a2]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
</UL>

<P><STRONG><a name="[a3]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
</UL>

<P><STRONG><a name="[a1]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
</UL>

<P><STRONG><a name="[a0]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
</UL>

<P><STRONG><a name="[7d]"></a>clockAdjust(Device*, Time&, Cursor&lang;(char)95, (signed char)8&rang;&)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, device.o(i._Z11clockAdjustP6DeviceR4TimeR6CursorILc95ELa8EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clockAdjust(Device*, Time&, Cursor&lang;(char)95, (signed char)8&rang;&) &rArr; Keypad&lang;GPIO_TypeDef&rang;::testKey(char) &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementTime(Time&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupClockHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
</UL>

<P><STRONG><a name="[81]"></a>icreaseTime(Time&)</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, clock.o(i._Z11icreaseTimeR4Time))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_tick(void*)
</UL>

<P><STRONG><a name="[7c]"></a>timer3_tick(void*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, device.o(i._Z11timer3_tickPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = timer3_tick(void*) &rArr; Relay::tick() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icreaseTime(Time&)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>decreaseTime(Time&)</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, clock.o(i._Z12decreaseTimeR4Time))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>

<P><STRONG><a name="[c5]"></a>gpio_pin_set(GPIO_TypeDef*, unsigned, bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio_ex.o(i._Z12gpio_pin_setP12GPIO_TypeDefjb))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::RelayWriteControl(bool)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::data_next()
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::strobe()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::data_on_bus(unsigned char)
</UL>

<P><STRONG><a name="[e1]"></a>gpio_pin_read(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio_ex.o(i._Z13gpio_pin_readP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>

<P><STRONG><a name="[7f]"></a>incrementTime(Time&, unsigned char)</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, device.o(i._Z13incrementTimeR4Timeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = incrementTime(Time&, unsigned char) &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockAdjust(Device*, Time&, Cursor&lang;(char)95, (signed char)8&rang;&)
</UL>

<P><STRONG><a name="[83]"></a>clockConverter(char*, const char*, Time&)</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, clock.o(i._Z14clockConverterPcPKcR4Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = clockConverter(char*, const char*, Time&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupClockHandler(void*, int)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage0Handler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeadPageHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getActivity()
</UL>

<P><STRONG><a name="[86]"></a>getAdjustments(int)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, device.o(i._Z14getAdjustmentsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = getAdjustments(int) &rArr; utoa(char*, unsigned, int) &rArr; [local to dtostr_cpp]::reverseChars(char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utoa(char*, unsigned, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa(char*, int, int)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjOffsetHandler(void*, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
</UL>

<P><STRONG><a name="[c8]"></a>gpio_pin_reset(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_ex.o(i._Z14gpio_pin_resetP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::strobe()
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::command_next()
</UL>

<P><STRONG><a name="[40]"></a>menuAdjHandler(void*, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, device.o(i._Z14menuAdjHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = menuAdjHandler(void*, int) &rArr; Message&lang;(int)9&rang;::operator ()(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[8a]"></a>device_adc_init()</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, init.o(i._Z15device_adc_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = device_adc_init() &rArr; ADC_GetCalibrationFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[41]"></a>menuAdjKHandler(void*, int)</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, device.o(i._Z15menuAdjKHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = menuAdjKHandler(void*, int) &rArr; getAdjustments(int) &rArr; utoa(char*, unsigned, int) &rArr; [local to dtostr_cpp]::reverseChars(char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::setAdjustmentK(float)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdjustments(int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[3c]"></a>menuExitHandler(void*, int)</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, device.o(i._Z15menuExitHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = menuExitHandler(void*, int) &rArr; Keypad&lang;GPIO_TypeDef&rang;::testKey(char) &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[99]"></a>device_gpio_init()</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, init.o(i._Z16device_gpio_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = device_gpio_init() &rArr; gpio_init(GPIO_TypeDef*, unsigned, GPIOSpeed_TypeDef, GPIOMode_TypeDef, GPIOOType_TypeDef, GPIOPuPd_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init(GPIO_TypeDef*, unsigned, GPIOSpeed_TypeDef, GPIOMode_TypeDef, GPIOOType_TypeDef, GPIOPuPd_TypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[9b]"></a>getTempInCelsium(int)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, device.o(i._Z16getTempInCelsiumi))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = getTempInCelsium(int) &rArr; utoa(char*, unsigned, int) &rArr; [local to dtostr_cpp]::reverseChars(char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utoa(char*, unsigned, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa(char*, int, int)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage2Handler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
</UL>

<P><STRONG><a name="[9c]"></a>device_timer_init()</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, init.o(i._Z17device_timer_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = device_timer_init() &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[3a]"></a>menuSetupOnHandler(void*, int)</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, device.o(i._Z18menuSetupOnHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = menuSetupOnHandler(void*, int) &rArr; clockConverter(char*, const char*, Time&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockConverter(char*, const char*, Time&)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor&lang;(char)95, (signed char)8&rang;::Cursor()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor&lang;(char)95, (signed char)8&rang;::update(char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getOverlayHighStatus()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::programOnValue(float)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getOnValue()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempInCelsium(int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockAdjust(Device*, Time&, Cursor&lang;(char)95, (signed char)8&rang;&)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[b0]"></a>device_enable_clock()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, init.o(i._Z19device_enable_clockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = device_enable_clock() &rArr; [local to init_cpp]::NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to init_cpp]::NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[32]"></a>menuHeadPageHandler(void*, int)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, device.o(i._Z19menuHeadPageHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = menuHeadPageHandler(void*, int) &rArr; clockConverter(char*, const char*, Time&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockConverter(char*, const char*, Time&)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::getLocalTime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[43]"></a>menuSaveExitHandler(void*, int)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, device.o(i._Z19menuSaveExitHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = menuSaveExitHandler(void*, int) &rArr; Keypad&lang;GPIO_TypeDef&rang;::testKey(char) &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[3b]"></a>menuSetupOffHandler(void*, int)</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, device.o(i._Z19menuSetupOffHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = menuSetupOffHandler(void*, int) &rArr; clockConverter(char*, const char*, Time&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockConverter(char*, const char*, Time&)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor&lang;(char)95, (signed char)8&rang;::Cursor()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor&lang;(char)95, (signed char)8&rang;::update(char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getStatus()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getOverlayLowStatus()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::programOffValue(float)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getOffValue()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempInCelsium(int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockAdjust(Device*, Time&, Cursor&lang;(char)95, (signed char)8&rang;&)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[42]"></a>menuAdjOffsetHandler(void*, int)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, device.o(i._Z20menuAdjOffsetHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = menuAdjOffsetHandler(void*, int) &rArr; getAdjustments(int) &rArr; utoa(char*, unsigned, int) &rArr; [local to dtostr_cpp]::reverseChars(char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::setAdjustmentOffset(float)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdjustments(int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[33]"></a>menuMainPage0Handler(void*, int)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, device.o(i._Z20menuMainPage0HandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = menuMainPage0Handler(void*, int) &rArr; Relay::getActivity() &rArr; clockConverter(char*, const char*, Time&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockConverter(char*, const char*, Time&)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::getLocalTime()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getActivity()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[34]"></a>menuMainPage1Handler(void*, int)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, device.o(i._Z20menuMainPage1HandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = menuMainPage1Handler(void*, int) &rArr; Keypad&lang;GPIO_TypeDef&rang;::testKey(char) &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getMode()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[35]"></a>menuMainPage2Handler(void*, int)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device.o(i._Z20menuMainPage2HandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = menuMainPage2Handler(void*, int) &rArr; getTempInCelsium(int) &rArr; utoa(char*, unsigned, int) &rArr; [local to dtostr_cpp]::reverseChars(char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getStatus()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempInCelsium(int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[36]"></a>menuMainPage3Handler(void*, int)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, device.o(i._Z20menuMainPage3HandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = menuMainPage3Handler(void*, int) &rArr; Keypad&lang;GPIO_TypeDef&rang;::testKey(char) &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getStatus()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getMode()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[37]"></a>menuMainPage4Handler(void*, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, device.o(i._Z20menuMainPage4HandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = menuMainPage4Handler(void*, int) &rArr; Message&lang;(int)9&rang;::operator ()(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[79]"></a>TimingDelay_Decrement()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, device.o(i._Z21TimingDelay_Decrementv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimingDelay_Decrement()
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3f]"></a>menuSetupClockHandler(void*, int)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, device.o(i._Z21menuSetupClockHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = menuSetupClockHandler(void*, int) &rArr; clockConverter(char*, const char*, Time&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockConverter(char*, const char*, Time&)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor&lang;(char)95, (signed char)8&rang;::Cursor()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor&lang;(char)95, (signed char)8&rang;::update(char*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::getLocalTime()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockAdjust(Device*, Time&, Cursor&lang;(char)95, (signed char)8&rang;&)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[3d]"></a>menuSetupOvTopHandler(void*, int)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, device.o(i._Z21menuSetupOvTopHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = menuSetupOvTopHandler(void*, int) &rArr; Keypad&lang;GPIO_TypeDef&rang;::testKey(char) &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getOverlayHighStatus()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[3e]"></a>menuSetupOvBottHandler(void*, int)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, device.o(i._Z22menuSetupOvBottHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = menuSetupOvBottHandler(void*, int) &rArr; Keypad&lang;GPIO_TypeDef&rang;::testKey(char) &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getOverlayLowStatus()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[39]"></a>menuInvertOutputHandler(void*, int)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, device.o(i._Z23menuInvertOutputHandlerPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = menuInvertOutputHandler(void*, int) &rArr; Keypad&lang;GPIO_TypeDef&rang;::testKey(char) &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[38]"></a>menuSwitchDefaultRelayPresets(void*, int)</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, device.o(i._Z29menuSwitchDefaultRelayPresetsPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = menuSwitchDefaultRelayPresets(void*, int) &rArr; Relay::getActivity() &rArr; clockConverter(char*, const char*, Time&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::operator ()(char*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MovingLine&lang;(int)8, (int)48&rang;::print&lang;char&rang;(T1*, int)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void MovingLine&lang;(int)8, (int)48&rang;::print&lang;const char&rang;(T1*, int)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getMode()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::unstashCurrentPreset()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::stashCurrentPreset()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getPresetInfo()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::getActivity()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::loadPreset(RelayPresetDataPack&, bool)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6DeviceC1Ev)
</UL>
<P><STRONG><a name="[87]"></a>itoa(char*, int, int)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dtostr.o(i._Z4itoaPcii))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = itoa(char*, int, int) &rArr; [local to dtostr_cpp]::reverseChars(char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dtostr_cpp]::reverseChars(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempInCelsium(int)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdjustments(int)
</UL>

<P><STRONG><a name="[88]"></a>utoa(char*, unsigned, int)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dtostr.o(i._Z4utoaPcji))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = utoa(char*, unsigned, int) &rArr; [local to dtostr_cpp]::reverseChars(char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dtostr_cpp]::reverseChars(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempInCelsium(int)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdjustments(int)
</UL>

<P><STRONG><a name="[ca]"></a>Delay(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, device.o(i._Z5Delayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::run()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::delay_ms(unsigned)
</UL>

<P><STRONG><a name="[9a]"></a>gpio_init(GPIO_TypeDef*, unsigned, GPIOSpeed_TypeDef, GPIOMode_TypeDef, GPIOOType_TypeDef, GPIOPuPd_TypeDef)</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, gpio_ex.o(i._Z9gpio_initP12GPIO_TypeDefj17GPIOSpeed_TypeDef16GPIOMode_TypeDef17GPIOOType_TypeDef16GPIOPuPd_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gpio_init(GPIO_TypeDef*, unsigned, GPIOSpeed_TypeDef, GPIOMode_TypeDef, GPIOOType_TypeDef, GPIOPuPd_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_gpio_init()
</UL>

<P><STRONG><a name="[cc]"></a>resetTime(Time&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(i._Z9resetTimeR4Time))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::Relay()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::loadPreset(RelayPresetDataPack&, bool)
</UL>

<P><STRONG><a name="[c3]"></a>LcdInterface::putChar(char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, device.o(i._ZN12LcdInterface7putCharEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdInterface::putChar(char) &rArr; LCD::sendData(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::sendData(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::__print(void*)
</UL>

<P><STRONG><a name="[46]"></a>LCD::data_on_bus(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, device.o(i._ZN3LCD11data_on_busEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD::data_on_bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_set(GPIO_TypeDef*, unsigned, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV3LCD)
</UL>
<P><STRONG><a name="[c6]"></a>LCD::sendCommand(unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(i._ZN3LCD11sendCommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD::sendCommand(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::delay_ns(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void LcdInterface::prints&lang;const char&rang;(T1*, int, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::init(const char*, unsigned char)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::setCursor(signed char, signed char)
</UL>

<P><STRONG><a name="[44]"></a>LCD::command_next()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, device.o(i._ZN3LCD12command_nextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD::command_next()
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_reset(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV3LCD)
</UL>
<P><STRONG><a name="[c9]"></a>LCD::init(const char*, unsigned char)</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, main.o(i._ZN3LCD4initEPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD::init(const char*, unsigned char) &rArr; LCD::sendCommand(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::sendCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[47]"></a>LCD::strobe()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, device.o(i._ZN3LCD6strobeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD::strobe()
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_reset(GPIO_TypeDef*, unsigned)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_set(GPIO_TypeDef*, unsigned, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV3LCD)
</UL>
<P><STRONG><a name="[48]"></a>LCD::delay_ms(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i._ZN3LCD8delay_msEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD::delay_ms(unsigned) &rArr; Delay(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV3LCD)
</UL>
<P><STRONG><a name="[c7]"></a>LCD::delay_ns(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i._ZN3LCD8delay_nsEj))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::sendData(unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::sendCommand(unsigned char)
</UL>

<P><STRONG><a name="[c4]"></a>LCD::sendData(unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(i._ZN3LCD8sendDataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD::sendData(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::delay_ns(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void LcdInterface::prints&lang;const char&rang;(T1*, int, int)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInterface::putChar(char)
</UL>

<P><STRONG><a name="[45]"></a>LCD::data_next()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, device.o(i._ZN3LCD9data_nextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD::data_next()
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_set(GPIO_TypeDef*, unsigned, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV3LCD)
</UL>
<P><STRONG><a name="[cb]"></a>LCD::setCursor(signed char, signed char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i._ZN3LCD9setCursorEaa))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD::setCursor(signed char, signed char) &rArr; LCD::sendCommand(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::sendCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::__print(void*)
</UL>

<P><STRONG><a name="[a9]"></a>Relay::getOnValue()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, device.o(i._ZN5Relay10getOnValueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Relay::getOnValue() &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
</UL>

<P><STRONG><a name="[bc]"></a>Relay::loadPreset(RelayPresetDataPack&, bool)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, device.o(i._ZN5Relay10loadPresetER19RelayPresetDataPackb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Relay::loadPreset(RelayPresetDataPack&, bool) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTime(Time&)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::updateControl()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
</UL>

<P><STRONG><a name="[b9]"></a>Relay::getActivity()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, device.o(i._ZN5Relay11getActivityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Relay::getActivity() &rArr; clockConverter(char*, const char*, Time&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockConverter(char*, const char*, Time&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage0Handler(void*, int)
</UL>

<P><STRONG><a name="[b5]"></a>Relay::getOffValue()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, device.o(i._ZN5Relay11getOffValueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Relay::getOffValue() &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
</UL>

<P><STRONG><a name="[ce]"></a>Relay::overlayTest()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, device.o(i._ZN5Relay11overlayTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Relay::overlayTest() &rArr; __aeabi_cfrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>

<P><STRONG><a name="[bd]"></a>Relay::getPresetInfo()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, device.o(i._ZN5Relay13getPresetInfoEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
</UL>

<P><STRONG><a name="[cd]"></a>Relay::updateControl()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, device.o(i._ZN5Relay13updateControlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay::updateControl()
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::unstashCurrentPreset()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::loadPreset(RelayPresetDataPack&, bool)
</UL>

<P><STRONG><a name="[ab]"></a>Relay::programOnValue(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(i._ZN5Relay14programOnValueEf))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
</UL>

<P><STRONG><a name="[95]"></a>Relay::setAdjustmentK(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(i._ZN5Relay14setAdjustmentKEf))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
</UL>

<P><STRONG><a name="[4a]"></a>Relay::RelayReadAnalog()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i._ZN5Relay15RelayReadAnalogEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Relay::RelayReadAnalog() &rArr; ADC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV5Relay)
</UL>
<P><STRONG><a name="[b6]"></a>Relay::programOffValue(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(i._ZN5Relay15programOffValueEf))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
</UL>

<P><STRONG><a name="[49]"></a>Relay::RelayWriteControl(bool)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, device.o(i._ZN5Relay17RelayWriteControlEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Relay::RelayWriteControl(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_set(GPIO_TypeDef*, unsigned, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV5Relay)
</UL>
<P><STRONG><a name="[bb]"></a>Relay::stashCurrentPreset()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, device.o(i._ZN5Relay18stashCurrentPresetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Relay::stashCurrentPreset() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
</UL>

<P><STRONG><a name="[b7]"></a>Relay::getOverlayLowStatus()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, device.o(i._ZN5Relay19getOverlayLowStatusEv))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOvBottHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
</UL>

<P><STRONG><a name="[b8]"></a>Relay::setAdjustmentOffset(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(i._ZN5Relay19setAdjustmentOffsetEf))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjOffsetHandler(void*, int)
</UL>

<P><STRONG><a name="[af]"></a>Relay::getOverlayHighStatus()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, device.o(i._ZN5Relay20getOverlayHighStatusEv))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOvTopHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
</UL>

<P><STRONG><a name="[bf]"></a>Relay::unstashCurrentPreset()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, device.o(i._ZN5Relay20unstashCurrentPresetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Relay::unstashCurrentPreset() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::updateControl()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
</UL>

<P><STRONG><a name="[80]"></a>Relay::tick()</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, device.o(i._ZN5Relay4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Relay::tick() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decreaseTime(Time&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::overlayTest()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_tick(void*)
</UL>

<P><STRONG><a name="[ba]"></a>Relay::getMode()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, device.o(i._ZN5Relay7getModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage3Handler(void*, int)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage1Handler(void*, int)
</UL>

<P><STRONG><a name="[ae]"></a>Relay::getStatus()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, device.o(i._ZN5Relay9getStatusEv))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage3Handler(void*, int)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage2Handler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
</UL>

<P><STRONG><a name="[d4]"></a>Relay::Relay()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, main.o(i._ZN5RelayC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay::Relay()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTime(Time&)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[120]"></a>Relay::Relay__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN5RelayC1Ev), UNUSED)

<P><STRONG><a name="[b4]"></a>Device::getLocalTime()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, device.o(i._ZN6Device12getLocalTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Device::getLocalTime() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupClockHandler(void*, int)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage0Handler(void*, int)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeadPageHandler(void*, int)
</UL>

<P><STRONG><a name="[d5]"></a>Device::run()</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, main.o(i._ZN6Device3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Device::run() &rArr; void LcdInterface::prints&lang;const char&rang;(T1*, int, int) &rArr; LCD::sendData(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay(unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::print(void*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::test()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void LcdInterface::prints&lang;const char&rang;(T1*, int, int)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLeaf::getNext(MenuLeaf*)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>Device::Device()</STRONG> (Thumb, 1528 bytes, Stack size 16 bytes, main.o(i._ZN6DeviceC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Device::Device() &rArr; device_gpio_init() &rArr; gpio_init(GPIO_TypeDef*, unsigned, GPIOSpeed_TypeDef, GPIOMode_TypeDef, GPIOOType_TypeDef, GPIOPuPd_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTime(Time&)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay(unsigned)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_enable_clock()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_gpio_init()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_adc_init()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Message&lang;(int)9&rang;::Message(unsigned char)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin&lang;GPIO_TypeDef&rang;::Pin(GPIO_TypeDef*, unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void LcdInterface::prints&lang;const char&rang;(T1*, int, int)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLeaf::MenuLeaf(int(*)(void*, int))
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLeaf::getFirstChild()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLeaf::connectFirst(MenuLeaf*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::Relay()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::init(const char*, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>Device::Device__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN6DeviceC1Ev), UNUSED)

<P><STRONG><a name="[de]"></a>MenuLeaf::connectFirst(MenuLeaf*)</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, main.o(i._ZN8MenuLeaf12connectFirstEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MenuLeaf::connectFirst(MenuLeaf*)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[df]"></a>MenuLeaf::getFirstChild()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._ZN8MenuLeaf13getFirstChildEv))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLeaf::getNext(MenuLeaf*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[d7]"></a>MenuLeaf::getNext(MenuLeaf*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i._ZN8MenuLeaf7getNextEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MenuLeaf::getNext(MenuLeaf*)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLeaf::getFirstChild()
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::run()
</UL>

<P><STRONG><a name="[dd]"></a>MenuLeaf::MenuLeaf(int(*)(void*, int))</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i._ZN8MenuLeafC1EPFiPviE))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[122]"></a>MenuLeaf::MenuLeaf__sub_object(int(*)(void*, int))</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN8MenuLeafC1EPFiPviE), UNUSED)

<P><STRONG><a name="[82]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, device.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementTime(Time&, unsigned char)
</UL>

<P><STRONG><a name="[a6]"></a>__cxa_guard_acquire</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupClockHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::getLocalTime()
</UL>

<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 216 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = main &rArr; Device::Device() &rArr; device_gpio_init() &rArr; gpio_init(GPIO_TypeDef*, unsigned, GPIOSpeed_TypeDef, GPIOMode_TypeDef, GPIOOType_TypeDef, GPIOPuPd_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay(unsigned)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c0]"></a>void MovingLine&lang;(int)8, (int)48&rang;::print&lang;const char&rang;(T1*, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, device.o(t._ZN10MovingLineILi8ELi48EE5printIKcEEvPT_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void MovingLine&lang;(int)8, (int)48&rang;::print&lang;const char&rang;(T1*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
</UL>

<P><STRONG><a name="[be]"></a>void MovingLine&lang;(int)8, (int)48&rang;::print&lang;char&rang;(T1*, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, device.o(t._ZN10MovingLineILi8ELi48EE5printIcEEvPT_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void MovingLine&lang;(int)8, (int)48&rang;::print&lang;char&rang;(T1*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
</UL>

<P><STRONG><a name="[d6]"></a>void LcdInterface::prints&lang;const char&rang;(T1*, int, int)</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, main.o(t._ZN12LcdInterface6printsIKcEEvPT_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void LcdInterface::prints&lang;const char&rang;(T1*, int, int) &rArr; LCD::sendData(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::sendData(unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::sendCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::run()
</UL>

<P><STRONG><a name="[e0]"></a>Pin&lang;GPIO_TypeDef&rang;::pinRead()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(t._ZN3PinI12GPIO_TypeDefE7pinReadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_read(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::testKey(char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad&lang;GPIO_TypeDef&rang;::test()
</UL>

<P><STRONG><a name="[dc]"></a>Pin&lang;GPIO_TypeDef&rang;::Pin(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(t._ZN3PinI12GPIO_TypeDefEC1EPS0_j))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[123]"></a>Pin&lang;GPIO_TypeDef&rang;::Pin__sub_object(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(t._ZN3PinI12GPIO_TypeDefEC1EPS0_j), UNUSED)

<P><STRONG><a name="[a8]"></a>Cursor&lang;(char)95, (signed char)8&rang;::update(char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, device.o(t._ZN6CursorILc95ELa8EE6updateEPc))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupClockHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
</UL>

<P><STRONG><a name="[a7]"></a>Cursor&lang;(char)95, (signed char)8&rang;::Cursor()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(t._ZN6CursorILc95ELa8EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupClockHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
</UL>

<P><STRONG><a name="[124]"></a>Cursor&lang;(char)95, (signed char)8&rang;::Cursor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, device.o(t._ZN6CursorILc95ELa8EEC1Ev), UNUSED)

<P><STRONG><a name="[d8]"></a>Keypad&lang;GPIO_TypeDef&rang;::test()</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, main.o(t._ZN6KeypadI12GPIO_TypeDefE4testEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keypad&lang;GPIO_TypeDef&rang;::test() &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::run()
</UL>

<P><STRONG><a name="[7e]"></a>Keypad&lang;GPIO_TypeDef&rang;::testKey(char)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(t._ZN6KeypadI12GPIO_TypeDefE7testKeyEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keypad&lang;GPIO_TypeDef&rang;::testKey(char) &rArr; Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin&lang;GPIO_TypeDef&rang;::pinRead()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInvertOutputHandler(void*, int)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOvBottHandler(void*, int)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOvTopHandler(void*, int)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage3Handler(void*, int)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage1Handler(void*, int)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjOffsetHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSaveExitHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExitHandler(void*, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::run()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockAdjust(Device*, Time&, Cursor&lang;(char)95, (signed char)8&rang;&)
</UL>

<P><STRONG><a name="[d9]"></a>Message&lang;(int)9&rang;::print(void*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(t._ZN7MessageILi9EE5printEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Message&lang;(int)9&rang;::print(void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::run()
</UL>

<P><STRONG><a name="[4b]"></a>Message&lang;(int)9&rang;::__print(void*)</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, device.o(t._ZN7MessageILi9EE7__printEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Message&lang;(int)9&rang;::__print(void*) &rArr; LCD::setCursor(signed char, signed char) &rArr; LCD::sendCommand(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD::setCursor(signed char, signed char)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInterface::putChar(char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV7MessageILi9EE)
</UL>
<P><STRONG><a name="[db]"></a>Message&lang;(int)9&rang;::Message(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(t._ZN7MessageILi9EEC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Message&lang;(int)9&rang;::Message(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
</UL>

<P><STRONG><a name="[125]"></a>Message&lang;(int)9&rang;::Message__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(t._ZN7MessageILi9EEC1Eh), UNUSED)

<P><STRONG><a name="[89]"></a>Message&lang;(int)9&rang;::operator ()(char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, device.o(t._ZN7MessageILi9EEclEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Message&lang;(int)9&rang;::operator ()(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSwitchDefaultRelayPresets(void*, int)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInvertOutputHandler(void*, int)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOvBottHandler(void*, int)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOvTopHandler(void*, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupClockHandler(void*, int)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage4Handler(void*, int)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage3Handler(void*, int)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage2Handler(void*, int)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage1Handler(void*, int)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuMainPage0Handler(void*, int)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjOffsetHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSaveExitHandler(void*, int)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHeadPageHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuExitHandler(void*, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjHandler(void*, int)
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjOffsetHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>

<P><STRONG><a name="[e2]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::overlayTest()
</UL>

<P><STRONG><a name="[e4]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjOffsetHandler(void*, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjKHandler(void*, int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>

<P><STRONG><a name="[126]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::overlayTest()
</UL>

<P><STRONG><a name="[e5]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuAdjOffsetHandler(void*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOffHandler(void*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSetupOnHandler(void*, int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay::tick()
</UL>

<P><STRONG><a name="[e6]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__sti___9_relay_cpp_87aa0a3f</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, relay.o(i.__sti___9_relay_cpp_87aa0a3f))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___9_relay_cpp_87aa0a3f
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> relay.o(.init_array)
</UL>
<P><STRONG><a name="[b1]"></a>[local to init_cpp]::NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, init.o(i._ZN29_INTERNAL_8_init_cpp_74261d6916NVIC_SetPriorityE4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to init_cpp]::NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_enable_clock()
</UL>

<P><STRONG><a name="[c1]"></a>[local to dtostr_cpp]::reverseChars(char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dtostr.o(i._ZN32_INTERNAL_10_dtostr_cpp_d694c04212reverseCharsEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = [local to dtostr_cpp]::reverseChars(char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utoa(char*, unsigned, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa(char*, int, int)
</UL>

<P><STRONG><a name="[7a]"></a>[local to system_stm32f0xx_c]::SetSysClock()</STRONG> (Thumb, 206 bytes, Stack size 12 bytes, system_stm32f0xx_1.o(i._ZN40_INTERNAL_18_system_stm32f0xx_c_5d646a6711SetSysClockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to system_stm32f0xx_c]::SetSysClock()
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[67]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[66]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[e7]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[e3]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[75]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
